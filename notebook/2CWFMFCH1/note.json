{
  "paragraphs": [
    {
      "title": "1. Load Data",
      "text": "import net.sansa_stack.rdf.spark.io.NTripleReader\nimport net.sansa_stack.rdf.spark.model.JenaSparkGraphXOps\nimport org.apache.spark.sql.SparkSession\nimport java.net.{URI \u003d\u003e JavaURI}\n\nimport net.sansa_stack.rdf.spark.graph.LoadGraph\nimport org.apache.spark.graphx.Graph\n\nval input \u003d \"hdfs://namenode:8020/data/GermanyPopulatedPlaces.nt\"\nval graph \u003d NTripleReader.load(spark, JavaURI.create(input))",
      "user": "anonymous",
      "dateUpdated": "Dec 28, 2017 11:13:09 AM",
      "config": {
        "colWidth": 12.0,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "scala"
        },
        "editorMode": "ace/mode/scala",
        "title": true,
        "tableHide": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TEXT",
            "data": "\nimport net.sansa_stack.rdf.spark.io.NTripleReader\n\nimport net.sansa_stack.rdf.spark.model.JenaSparkGraphXOps\n\nimport org.apache.spark.sql.SparkSession\n\nimport java.net.{URI\u003d\u003eJavaURI}\n\nimport net.sansa_stack.rdf.spark.graph.LoadGraph\n\nimport org.apache.spark.graphx.Graph\n\ninput: String \u003d hdfs://namenode:8020/data/GermanyPopulatedPlaces.nt\n\ngraph: org.apache.spark.rdd.RDD[org.apache.jena.graph.Triple] \u003d MapPartitionsRDD[3] at map at NTripleReader.scala:39\n"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1509621876108_-341284568",
      "id": "20171102-112436_172970529",
      "dateCreated": "Nov 2, 2017 11:24:36 AM",
      "dateStarted": "Dec 28, 2017 11:13:09 AM",
      "dateFinished": "Dec 28, 2017 11:13:56 AM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "title": "2. Compute statistics (i.e. Property Distribution)",
      "text": "import net.sansa_stack.rdf.spark.stats._\n\nval propertyDist \u003d PropertyUsage(graph, spark).PostProc()\n                   .map(f \u003d\u003e f._1.getLocalName+ \"\\t\" + f._2)\n\nprintln(\"%table Property Distribution\\tFrequency\\n \" + propertyDist.mkString(\"\\n\"))",
      "user": "anonymous",
      "dateUpdated": "Dec 27, 2017 2:32:02 PM",
      "config": {
        "colWidth": 12.0,
        "enabled": true,
        "results": {
          "1": {
            "graph": {
              "mode": "pieChart",
              "height": 300.0,
              "optionOpen": false
            },
            "helium": {}
          }
        },
        "editorSetting": {
          "language": "scala"
        },
        "editorMode": "ace/mode/scala",
        "title": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TEXT",
            "data": "\nimport net.sansa_stack.rdf.spark.stats._\n\npropertyDist: Array[String] \u003d Array(type\t9103, BFO_0000050\t7199, label\t7183, population\t7183, geo\t7183, seeAlso\t3787, nameOfficialEN\t69, creator\t1, created\t1, title\t1, rights\t1, description\t1, rights\t1, source\t1)\n"
          },
          {
            "type": "TABLE",
            "data": "Property Distribution\tFrequency\n type\t9103\nBFO_0000050\t7199\nlabel\t7183\npopulation\t7183\ngeo\t7183\nseeAlso\t3787\nnameOfficialEN\t69\ncreator\t1\ncreated\t1\ntitle\t1\nrights\t1\ndescription\t1\nrights\t1\nsource\t1\n"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1509621997083_-1710050944",
      "id": "20171102-112637_201407605",
      "dateCreated": "Nov 2, 2017 11:26:37 AM",
      "dateStarted": "Dec 27, 2017 2:32:02 PM",
      "dateFinished": "Dec 27, 2017 2:32:10 PM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "title": "3. Infer new Knowledge",
      "text": "import net.sansa_stack.inference.spark.forwardchaining.triples.{ForwardRuleReasonerOWLHorst, ForwardRuleReasonerRDFS, TransitiveReasoner}\nimport net.sansa_stack.inference.spark.data.loader.RDFGraphLoader\nimport java.net.{ URI \u003d\u003e JavaURI }\n\nval RDFGraph \u003d RDFGraphLoader.loadFromDisk(spark, JavaURI.create(input), 4)\nval reasoner \u003d new ForwardRuleReasonerRDFS(spark.sparkContext)\nval inferredGraph \u003d reasoner.apply(RDFGraph)\ninferredGraph.cache()",
      "user": "anonymous",
      "dateUpdated": "Dec 28, 2017 11:19:09 AM",
      "config": {
        "colWidth": 12.0,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "scala"
        },
        "editorMode": "ace/mode/scala",
        "title": true,
        "tableHide": true,
        "editorHide": false
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TEXT",
            "data": "\nimport net.sansa_stack.inference.spark.forwardchaining.triples.{ForwardRuleReasonerOWLHorst, ForwardRuleReasonerRDFS, TransitiveReasoner}\n\nimport net.sansa_stack.inference.spark.data.loader.RDFGraphLoader\n\nimport java.net.{URI\u003d\u003eJavaURI}\n\nRDFGraph: net.sansa_stack.inference.spark.data.model.RDFGraph \u003d RDFGraph(MapPartitionsRDD[101] at map at RDFGraphLoader.scala:45)\n\nreasoner: net.sansa_stack.inference.spark.forwardchaining.triples.ForwardRuleReasonerRDFS \u003d net.sansa_stack.inference.spark.forwardchaining.triples.ForwardRuleReasonerRDFS@55feeadc\n\ninferredGraph: net.sansa_stack.inference.spark.data.model.RDFGraph \u003d RDFGraph(MapPartitionsRDD[138] at distinct at ForwardRuleReasonerRDFS.scala:217)\n\nres2: net.sansa_stack.inference.spark.data.model.RDFGraph \u003d RDFGraph(MapPartitionsRDD[138] at distinct at ForwardRuleReasonerRDFS.scala:217)\n"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1509622028081_1197324639",
      "id": "20171102-112708_848247359",
      "dateCreated": "Nov 2, 2017 11:27:08 AM",
      "dateStarted": "Dec 28, 2017 11:19:05 AM",
      "dateFinished": "Dec 28, 2017 11:19:15 AM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "title": "3.1 Compute statistics (i.e Class Distribution to the original graph)",
      "text": "val rdf_stats_class_dist \u003d Used_Classes(graph, spark).PostProc()\n                           .map(f \u003d\u003e f._1.toString.substring(f._1.toString.lastIndexOf(\"/\") + 1)+ \"\\t\" + f._2)\nprintln(\"%table Class Distribution\\tFrequency\\n \" + rdf_stats_class_dist.mkString(\"\\n\"))",
      "user": "anonymous",
      "dateUpdated": "Dec 27, 2017 2:32:19 PM",
      "config": {
        "colWidth": 6.0,
        "enabled": true,
        "results": {
          "1": {
            "graph": {
              "mode": "lineChart",
              "height": 300.0,
              "optionOpen": false
            },
            "helium": {}
          }
        },
        "editorSetting": {
          "language": "scala"
        },
        "editorMode": "ace/mode/scala",
        "title": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TEXT",
            "data": "\nrdf_stats_class_dist: Array[String] \u003d Array(core#PopulatedPlace\t7183, fabio#WikipediaEntry\t1903, core#StateOrProvince\t16, Dataset\t1)\n"
          },
          {
            "type": "TABLE",
            "data": "Class Distribution\tFrequency\n core#PopulatedPlace\t7183\nfabio#WikipediaEntry\t1903\ncore#StateOrProvince\t16\nDataset\t1\n"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1509622058566_569460406",
      "id": "20171102-112738_1999790335",
      "dateCreated": "Nov 2, 2017 11:27:38 AM",
      "dateStarted": "Dec 27, 2017 2:32:19 PM",
      "dateFinished": "Dec 27, 2017 2:32:26 PM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "title": "3.2 Compute statistics (i.e size of the inferred graph)",
      "text": "val O_graph \u003d \"original graph\" + \"\\t\" + graph.count \nval I_Graph \u003d \"\\n inferred graph\" + \"\\t\" + inferredGraph.size\n\nprintln(\"%table graph\\t size\\n \" + O_graph.union(I_Graph))\n\n//val I_Graph \u003d \"inferred graph\" + \"\\t\" + inferredGraph.size\n//println(\"%table graph\\t size\\n \" + I_Graph)",
      "user": "anonymous",
      "dateUpdated": "Dec 28, 2017 11:20:24 AM",
      "config": {
        "colWidth": 6.0,
        "enabled": true,
        "results": {
          "1": {
            "graph": {
              "mode": "multiBarChart",
              "height": 300.0,
              "optionOpen": false
            },
            "helium": {}
          }
        },
        "editorSetting": {
          "language": "scala"
        },
        "editorMode": "ace/mode/scala",
        "title": true,
        "tableHide": false,
        "editorHide": false
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TEXT",
            "data": "\nO_graph: String \u003d original graph\t41714\n\n\n\nI_Graph: String \u003d\n\"\n inferred graph\t52709\"\n"
          },
          {
            "type": "TABLE",
            "data": "graph\t size\n original graph\t41714\n inferred graph\t52709\n"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1509622096514_561642835",
      "id": "20171102-112816_1291571260",
      "dateCreated": "Nov 2, 2017 11:28:16 AM",
      "dateStarted": "Dec 28, 2017 11:19:19 AM",
      "dateFinished": "Dec 28, 2017 11:19:32 AM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "title": "4. Compute resource ranking and get top 50 POIs.",
      "text": "val graph_rep \u003d LoadGraph(graph)\n   // Create a subgraph based on the vertices connected by geoproperty.\n val geoSubgraph \u003d\n    graph_rep.subgraph(t \u003d\u003e t.attr \u003d\u003d\"http://www.w3.org/2006/vcard/ns#geo\")\n\nval pagerank \u003d geoSubgraph.pageRank(0.00001).vertices\nval report \u003d pagerank.join(geoSubgraph.vertices)\n     .map({ case (k, (r, v)) \u003d\u003e (r, v, k) })\n     .sortBy(50 - _._1)\n\ncase class POI(geoloc:Long, rank:Double, lat: String, lon: String)\n val POIs \u003d report.filter(f\u003d\u003ef._2.isLiteral()\u0026\u0026 f._2.getLiteralLexicalForm().startsWith(\"geo:\")).map { f \u003d\u003e\n    val geoloc \u003d f._3\n    val rank \u003d f._1\n    val geo \u003d f._2.getLiteralLexicalForm.split(\"[:,]+\")\n    val lat \u003d geo(1)\n    val lon \u003d geo(2)\n\n    POI(geoloc, rank, lat, lon)\n\n  }.take(50)\n\nz.angularBind(\"pois\", POIs) // this is what sends the data to the map\n\nval reportPOI \u003d POIs.map(f \u003d\u003e f.geoloc + \"\\t\" + f.lat+\", \" + f.lon + \"\\t\" + f.rank)\nprintln(\"%table geoloc \\t geocord \\t rank \\n \" + reportPOI.mkString(\"\\n\"))",
      "user": "anonymous",
      "dateUpdated": "Dec 28, 2017 11:16:10 AM",
      "config": {
        "colWidth": 12.0,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "scala"
        },
        "editorMode": "ace/mode/scala",
        "title": true,
        "tableHide": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TEXT",
            "data": "\ngraph_rep: org.apache.spark.graphx.Graph[org.apache.jena.graph.Node,org.apache.jena.graph.Node] \u003d org.apache.spark.graphx.impl.GraphImpl@58ac0d6c\n\ngeoSubgraph: org.apache.spark.graphx.Graph[org.apache.jena.graph.Node,org.apache.jena.graph.Node] \u003d org.apache.spark.graphx.impl.GraphImpl@6f26e1eb\n\npagerank: org.apache.spark.graphx.VertexRDD[Double] \u003d VertexRDDImpl[79] at RDD at VertexRDD.scala:57\n\nreport: org.apache.spark.rdd.RDD[(Double, org.apache.jena.graph.Node, org.apache.spark.graphx.VertexId)] \u003d MapPartitionsRDD[90] at sortBy at \u003cconsole\u003e:43\n\ndefined class POI\nPOIs: Array[POI] \u003d Array(POI(18624,0.15,49.85,7.81667), POI(23776,0.15,51.9964,8.04153), POI(24252,0.15,48.0167,8.66667), POI(11852,0.15,49.4167,10.4333), POI(4992,0.15,52.0531,12.6185), POI(30436,0.15,47.95522,12.59242), POI(7456,0.15,49.4667,7.58333), POI(1780,0.15,52.3752,8.9426), POI(17044,0.15,50.9833,14.8), POI(12420,0.15,48.2333,8.55), POI(27108,0.15,50.4041,7.6039), POI(19216,0.15,50.73333,8.86667), POI(11084,0.15,48.1833,9.68333), POI(28836,0.15,53.7667,10.9333), POI(28412,0.15,49.8194,9.62889), POI(28704,0.15,52.60763,8.3663), POI(5204,0.15,47.6269,9.8334), POI(5648,0.15,48.1833,8.41667), POI(25116,0.15,47.9586,11.5674), POI(26928,0.15,51.4167,12.8833), POI(22048,0.15,48.59534,8.86751), POI(20096,0.15,54.22902,12.58115), POI(2744,0.15,54,12.0333), POI(30408,0.15,50.3334,10.901...reportPOI: Array[String] \u003d Array(18624\t49.85, 7.81667\t0.15, 23776\t51.9964, 8.04153\t0.15, 24252\t48.0167, 8.66667\t0.15, 11852\t49.4167, 10.4333\t0.15, 4992\t52.0531, 12.6185\t0.15, 30436\t47.95522, 12.59242\t0.15, 7456\t49.4667, 7.58333\t0.15, 1780\t52.3752, 8.9426\t0.15, 17044\t50.9833, 14.8\t0.15, 12420\t48.2333, 8.55\t0.15, 27108\t50.4041, 7.6039\t0.15, 19216\t50.73333, 8.86667\t0.15, 11084\t48.1833, 9.68333\t0.15, 28836\t53.7667, 10.9333\t0.15, 28412\t49.8194, 9.62889\t0.15, 28704\t52.60763, 8.3663\t0.15, 5204\t47.6269, 9.8334\t0.15, 5648\t48.1833, 8.41667\t0.15, 25116\t47.9586, 11.5674\t0.15, 26928\t51.4167, 12.8833\t0.15, 22048\t48.59534, 8.86751\t0.15, 20096\t54.22902, 12.58115\t0.15, 2744\t54, 12.0333\t0.15, 30408\t50.3334, 10.901\t0.15, 30496\t50.5833, 7.38333\t0.15, 29456\t50.7586, 8.21245\t0.15, 15056\t49.4851, 9.8997\t0.15,...%table geoloc \t geocord \t rank \n 18624\t49.85, 7.81667\t0.15\n23776\t51.9964, 8.04153\t0.15\n24252\t48.0167, 8.66667\t0.15\n11852\t49.4167, 10.4333\t0.15\n4992\t52.0531, 12.6185\t0.15\n30436\t47.95522, 12.59242\t0.15\n7456\t49.4667, 7.58333\t0.15\n1780\t52.3752, 8.9426\t0.15\n17044\t50.9833, 14.8\t0.15\n12420\t48.2333, 8.55\t0.15\n27108\t50.4041, 7.6039\t0.15\n19216\t50.73333, 8.86667\t0.15\n11084\t48.1833, 9.68333\t0.15\n28836\t53.7667, 10.9333\t0.15\n28412\t49.8194, 9.62889\t0.15\n28704\t52.60763, 8.3663\t0.15\n5204\t47.6269, 9.8334\t0.15\n5648\t48.1833, 8.41667\t0.15\n25116\t47.9586, 11.5674\t0.15\n26928\t51.4167, 12.8833\t0.15\n22048\t48.59534, 8.86751\t0.15\n20096\t54.22902, 12.58115\t0.15\n2744\t54, 12.0333\t0.15\n30408\t50.3334, 10.901\t0.15\n30496\t50.5833, 7.38333\t0.15\n29456\t50.7586, 8.21245\t0.15\n15056\t49.4851, 9.8997\t0.15\n5688\t54.1042, 10.8031\t0.15\n17272\t47.73335, 7.8\t0.15\n1044\t52.2206, 13.4402\t0.15\n8048\t51.2, 8.71667\t0.15\n23180\t48.4764, 10.3684\t0.15\n8512\t50.1833, 8.46667\t0.15\n18128\t47.5969, 9.8697\t0.15\n27480\t50.58333, 7.06667\t0.15\n26696\t49.00252, 10.66266\t0.15\n10792\t48.73936, 9.30609\t0.15\n888\t47.65, 7.56667\t0.15\n5184\t49.1667, 10.65\t0.15\n4016\t52.0566, 7.839\t0.15\n27076\t51.4667, 11.2\t0.15\n4672\t53.3391, 13.4188\t0.15\n29972\t51.0386, 8.41661\t0.15\n13400\t47.46095, 10.27165\t0.15\n22268\t47.93333, 10.81667\t0.15\n1688\t48.4106, 8.0075\t0.15\n5016\t50.07057, 12.12553\t0.15\n29992\t52.7184, 9.18648\t0.15\n31120\t52.61748, 10.08502\t0.15\n28276\t50.05, 8.7\t0.15\n"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1509622142083_-934214916",
      "id": "20171102-112902_1189673617",
      "dateCreated": "Nov 2, 2017 11:29:02 AM",
      "dateStarted": "Dec 28, 2017 11:15:08 AM",
      "dateFinished": "Dec 28, 2017 11:15:57 AM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "title": "5.Show POI on the map",
      "text": "%angular\n\n\u003clink rel\u003d\"stylesheet\" href\u003d\"https://cdnjs.cloudflare.com/ajax/libs/leaflet/0.7.5/leaflet.css\" /\u003e\n\u003cdiv id\u003d\"map\" style\u003d\"height: 800px; width: 100%\"\u003e\u003c/div\u003e\n\n\u003cscript type\u003d\"text/javascript\"\u003e\nfunction initMap() {\n    var map \u003d L.map(\u0027map\u0027).setView([30.00, -30.00], 3);\n\n    L.tileLayer(\u0027http://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\u0027, {\n        attribution: \u0027Map data \u0026copy; \u003ca href\u003d\"http://openstreetmap.org\"\u003eOpenStreetMap\u003c/a\u003e contributors\u0027,\n        maxZoom: 12,\n        minZoom: 3\n    }).addTo(map);\n\n    var geoMarkers \u003d L.layerGroup().addTo(map);\n\n    var el \u003d angular.element($(\u0027#map\u0027).parent(\u0027.ng-scope\u0027));\n    angular.element(el).ready(function() {\n        window.locationWatcher \u003d el.scope().compiledScope.$watch(\u0027pois\u0027, function(newValue, oldValue) {\n            // geoMarkers.clearLayers(); -- if you want to only show new data clear the layer first\n            angular.forEach(newValue, function(poi) {\n                var marker \u003d L.marker([ poi.lat, poi.lon ])\n                  .bindPopup(poi.geoloc + \": \" + poi.rank)\n                  .addTo(geoMarkers);\n            });\n        })\n    });\n}\n\nif (window.locationWatcher) {\n    // clear existing watcher otherwise we\u0027ll have duplicates\n    window.locationWatcher();\n}\n\n// ensure we only load the script once, seems to cause issues otherwise\nif (window.L) {\n    initMap();\n} else {\n    console.log(\u0027Loading Leaflet library\u0027);\n    var sc \u003d document.createElement(\u0027script\u0027);\n    sc.type \u003d \u0027text/javascript\u0027;\n    sc.src \u003d \u0027https://cdnjs.cloudflare.com/ajax/libs/leaflet/0.7.5/leaflet.js\u0027;\n    sc.onload \u003d initMap;\n    sc.onerror \u003d function(err) { alert(err); }\n    document.getElementsByTagName(\u0027head\u0027)[0].appendChild(sc);\n}\n\u003c/script\u003e\n",
      "user": "anonymous",
      "dateUpdated": "Nov 2, 2017 11:31:47 AM",
      "config": {
        "colWidth": 12.0,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "scala",
          "editOnDblClick": true
        },
        "editorMode": "ace/mode/undefined",
        "editorHide": true,
        "tableHide": false,
        "title": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "ANGULAR",
            "data": "\u003clink rel\u003d\"stylesheet\" href\u003d\"https://cdnjs.cloudflare.com/ajax/libs/leaflet/0.7.5/leaflet.css\" /\u003e\n\u003cdiv id\u003d\"map\" style\u003d\"height: 800px; width: 100%\"\u003e\u003c/div\u003e\n\n\u003cscript type\u003d\"text/javascript\"\u003e\nfunction initMap() {\n    var map \u003d L.map(\u0027map\u0027).setView([30.00, -30.00], 3);\n\n    L.tileLayer(\u0027http://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\u0027, {\n        attribution: \u0027Map data \u0026copy; \u003ca href\u003d\"http://openstreetmap.org\"\u003eOpenStreetMap\u003c/a\u003e contributors\u0027,\n        maxZoom: 12,\n        minZoom: 3\n    }).addTo(map);\n\n    var geoMarkers \u003d L.layerGroup().addTo(map);\n\n    var el \u003d angular.element($(\u0027#map\u0027).parent(\u0027.ng-scope\u0027));\n    angular.element(el).ready(function() {\n        window.locationWatcher \u003d el.scope().compiledScope.$watch(\u0027pois\u0027, function(newValue, oldValue) {\n            // geoMarkers.clearLayers(); -- if you want to only show new data clear the layer first\n            angular.forEach(newValue, function(poi) {\n                var marker \u003d L.marker([ poi.lat, poi.lon ])\n                  .bindPopup(poi.geoloc + \": \" + poi.rank)\n                  .addTo(geoMarkers);\n            });\n        })\n    });\n}\n\nif (window.locationWatcher) {\n    // clear existing watcher otherwise we\u0027ll have duplicates\n    window.locationWatcher();\n}\n\n// ensure we only load the script once, seems to cause issues otherwise\nif (window.L) {\n    initMap();\n} else {\n    console.log(\u0027Loading Leaflet library\u0027);\n    var sc \u003d document.createElement(\u0027script\u0027);\n    sc.type \u003d \u0027text/javascript\u0027;\n    sc.src \u003d \u0027https://cdnjs.cloudflare.com/ajax/libs/leaflet/0.7.5/leaflet.js\u0027;\n    sc.onload \u003d initMap;\n    sc.onerror \u003d function(err) { alert(err); }\n    document.getElementsByTagName(\u0027head\u0027)[0].appendChild(sc);\n}\n\u003c/script\u003e"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1509622213641_-1187071564",
      "id": "20171102-113013_1400142385",
      "dateCreated": "Nov 2, 2017 11:30:13 AM",
      "dateStarted": "Nov 2, 2017 11:30:50 AM",
      "dateFinished": "Nov 2, 2017 11:30:51 AM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    }
  ],
  "name": "Point of Interest Example",
  "id": "2CWFMFCH1",
  "angularObjects": {
    "2D33YK2ZV:shared_process": [],
    "2D2QDZVF8:shared_process": [],
    "2D4CSRPVP:shared_process": [],
    "2D1KW6DCF:shared_process": [],
    "2D38MGAYR:shared_process": [],
    "2D3U6P1WX:shared_process": [],
    "2D4TG8KJ7:shared_process": [],
    "2D455A9CR:shared_process": [],
    "2D39MP9GW:shared_process": [],
    "2D21P9ZD2:shared_process": [],
    "2D1GGVDHK:shared_process": [],
    "2D51JCN3R:shared_process": [],
    "2D5B282JG:shared_process": [],
    "2D526QBBW:shared_process": [
      {
        "name": "pois",
        "object": [
          {
            "geoloc": 18624.0,
            "rank": 0.15,
            "lat": "49.85",
            "lon": "7.81667"
          },
          {
            "geoloc": 23776.0,
            "rank": 0.15,
            "lat": "51.9964",
            "lon": "8.04153"
          },
          {
            "geoloc": 24252.0,
            "rank": 0.15,
            "lat": "48.0167",
            "lon": "8.66667"
          },
          {
            "geoloc": 11852.0,
            "rank": 0.15,
            "lat": "49.4167",
            "lon": "10.4333"
          },
          {
            "geoloc": 4992.0,
            "rank": 0.15,
            "lat": "52.0531",
            "lon": "12.6185"
          },
          {
            "geoloc": 30436.0,
            "rank": 0.15,
            "lat": "47.95522",
            "lon": "12.59242"
          },
          {
            "geoloc": 7456.0,
            "rank": 0.15,
            "lat": "49.4667",
            "lon": "7.58333"
          },
          {
            "geoloc": 1780.0,
            "rank": 0.15,
            "lat": "52.3752",
            "lon": "8.9426"
          },
          {
            "geoloc": 17044.0,
            "rank": 0.15,
            "lat": "50.9833",
            "lon": "14.8"
          },
          {
            "geoloc": 12420.0,
            "rank": 0.15,
            "lat": "48.2333",
            "lon": "8.55"
          },
          {
            "geoloc": 27108.0,
            "rank": 0.15,
            "lat": "50.4041",
            "lon": "7.6039"
          },
          {
            "geoloc": 19216.0,
            "rank": 0.15,
            "lat": "50.73333",
            "lon": "8.86667"
          },
          {
            "geoloc": 11084.0,
            "rank": 0.15,
            "lat": "48.1833",
            "lon": "9.68333"
          },
          {
            "geoloc": 28836.0,
            "rank": 0.15,
            "lat": "53.7667",
            "lon": "10.9333"
          },
          {
            "geoloc": 28412.0,
            "rank": 0.15,
            "lat": "49.8194",
            "lon": "9.62889"
          },
          {
            "geoloc": 28704.0,
            "rank": 0.15,
            "lat": "52.60763",
            "lon": "8.3663"
          },
          {
            "geoloc": 5204.0,
            "rank": 0.15,
            "lat": "47.6269",
            "lon": "9.8334"
          },
          {
            "geoloc": 5648.0,
            "rank": 0.15,
            "lat": "48.1833",
            "lon": "8.41667"
          },
          {
            "geoloc": 25116.0,
            "rank": 0.15,
            "lat": "47.9586",
            "lon": "11.5674"
          },
          {
            "geoloc": 26928.0,
            "rank": 0.15,
            "lat": "51.4167",
            "lon": "12.8833"
          },
          {
            "geoloc": 22048.0,
            "rank": 0.15,
            "lat": "48.59534",
            "lon": "8.86751"
          },
          {
            "geoloc": 20096.0,
            "rank": 0.15,
            "lat": "54.22902",
            "lon": "12.58115"
          },
          {
            "geoloc": 2744.0,
            "rank": 0.15,
            "lat": "54",
            "lon": "12.0333"
          },
          {
            "geoloc": 30408.0,
            "rank": 0.15,
            "lat": "50.3334",
            "lon": "10.901"
          },
          {
            "geoloc": 30496.0,
            "rank": 0.15,
            "lat": "50.5833",
            "lon": "7.38333"
          },
          {
            "geoloc": 29456.0,
            "rank": 0.15,
            "lat": "50.7586",
            "lon": "8.21245"
          },
          {
            "geoloc": 15056.0,
            "rank": 0.15,
            "lat": "49.4851",
            "lon": "9.8997"
          },
          {
            "geoloc": 5688.0,
            "rank": 0.15,
            "lat": "54.1042",
            "lon": "10.8031"
          },
          {
            "geoloc": 17272.0,
            "rank": 0.15,
            "lat": "47.73335",
            "lon": "7.8"
          },
          {
            "geoloc": 1044.0,
            "rank": 0.15,
            "lat": "52.2206",
            "lon": "13.4402"
          },
          {
            "geoloc": 8048.0,
            "rank": 0.15,
            "lat": "51.2",
            "lon": "8.71667"
          },
          {
            "geoloc": 23180.0,
            "rank": 0.15,
            "lat": "48.4764",
            "lon": "10.3684"
          },
          {
            "geoloc": 8512.0,
            "rank": 0.15,
            "lat": "50.1833",
            "lon": "8.46667"
          },
          {
            "geoloc": 18128.0,
            "rank": 0.15,
            "lat": "47.5969",
            "lon": "9.8697"
          },
          {
            "geoloc": 27480.0,
            "rank": 0.15,
            "lat": "50.58333",
            "lon": "7.06667"
          },
          {
            "geoloc": 26696.0,
            "rank": 0.15,
            "lat": "49.00252",
            "lon": "10.66266"
          },
          {
            "geoloc": 10792.0,
            "rank": 0.15,
            "lat": "48.73936",
            "lon": "9.30609"
          },
          {
            "geoloc": 888.0,
            "rank": 0.15,
            "lat": "47.65",
            "lon": "7.56667"
          },
          {
            "geoloc": 5184.0,
            "rank": 0.15,
            "lat": "49.1667",
            "lon": "10.65"
          },
          {
            "geoloc": 4016.0,
            "rank": 0.15,
            "lat": "52.0566",
            "lon": "7.839"
          },
          {
            "geoloc": 27076.0,
            "rank": 0.15,
            "lat": "51.4667",
            "lon": "11.2"
          },
          {
            "geoloc": 4672.0,
            "rank": 0.15,
            "lat": "53.3391",
            "lon": "13.4188"
          },
          {
            "geoloc": 29972.0,
            "rank": 0.15,
            "lat": "51.0386",
            "lon": "8.41661"
          },
          {
            "geoloc": 13400.0,
            "rank": 0.15,
            "lat": "47.46095",
            "lon": "10.27165"
          },
          {
            "geoloc": 22268.0,
            "rank": 0.15,
            "lat": "47.93333",
            "lon": "10.81667"
          },
          {
            "geoloc": 1688.0,
            "rank": 0.15,
            "lat": "48.4106",
            "lon": "8.0075"
          },
          {
            "geoloc": 5016.0,
            "rank": 0.15,
            "lat": "50.07057",
            "lon": "12.12553"
          },
          {
            "geoloc": 29992.0,
            "rank": 0.15,
            "lat": "52.7184",
            "lon": "9.18648"
          },
          {
            "geoloc": 31120.0,
            "rank": 0.15,
            "lat": "52.61748",
            "lon": "10.08502"
          },
          {
            "geoloc": 28276.0,
            "rank": 0.15,
            "lat": "50.05",
            "lon": "8.7"
          }
        ],
        "noteId": "2CWFMFCH1"
      }
    ],
    "2D55GQVPS:shared_process": [],
    "2D1H4K2ZN:shared_process": [],
    "2D4BEADRU:shared_process": [],
    "2D3HK4ZNC:shared_process": [],
    "2D54UYECS:shared_process": []
  },
  "config": {},
  "info": {}
}