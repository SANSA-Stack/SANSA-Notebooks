{
  "paragraphs": [
    {
      "title": "1. Load Data",
      "text": "import net.sansa_stack.rdf.spark.io.NTripleReader\nimport net.sansa_stack.rdf.spark.model.JenaSparkGraphXOps\nimport org.apache.spark.sql.SparkSession\nimport java.net.{URI \u003d\u003e JavaURI}\n\nimport net.sansa_stack.rdf.spark.graph.LoadGraph\nimport org.apache.spark.graphx.Graph\n\nval input \u003d \"hdfs://namenode:8020/data/GermanyPopulatedPlaces.nt\"\nval graph \u003d NTripleReader.load(spark, JavaURI.create(input))",
      "user": "anonymous",
      "dateUpdated": "Nov 2, 2017 11:26:28 AM",
      "config": {
        "colWidth": 12.0,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "scala"
        },
        "editorMode": "ace/mode/scala",
        "title": true,
        "tableHide": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TEXT",
            "data": "\nimport net.sansa_stack.rdf.spark.io.NTripleReader\n\nimport net.sansa_stack.rdf.spark.model.JenaSparkGraphXOps\n\nimport org.apache.spark.sql.SparkSession\n\nimport java.net.{URI\u003d\u003eJavaURI}\n\nimport net.sansa_stack.rdf.spark.graph.LoadGraph\n\nimport org.apache.spark.graphx.Graph\n\ninput: String \u003d hdfs://namenode:8020/data/GermanyPopulatedPlaces.nt\n\ngraph: org.apache.spark.rdd.RDD[org.apache.jena.graph.Triple] \u003d MapPartitionsRDD[3] at map at NTripleReader.scala:39\n"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1509621876108_-341284568",
      "id": "20171102-112436_172970529",
      "dateCreated": "Nov 2, 2017 11:24:36 AM",
      "dateStarted": "Nov 2, 2017 11:25:55 AM",
      "dateFinished": "Nov 2, 2017 11:26:24 AM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "title": "2. Compute statistics (i.e. Property Distribution)",
      "text": "import net.sansa_stack.rdf.spark.stats._\n\nval propertyDist \u003d PropertyUsage(graph, spark).PostProc()\n                   .map(f \u003d\u003e f._1.getLocalName+ \"\\t\" + f._2)\n\nprintln(\"%table Property Distribution\\tFrequency\\n \" + propertyDist.mkString(\"\\n\"))",
      "user": "anonymous",
      "dateUpdated": "Nov 2, 2017 11:27:24 AM",
      "config": {
        "colWidth": 12.0,
        "enabled": true,
        "results": {
          "1": {
            "graph": {
              "mode": "pieChart",
              "height": 300.0,
              "optionOpen": false
            },
            "helium": {}
          }
        },
        "editorSetting": {
          "language": "scala"
        },
        "editorMode": "ace/mode/scala",
        "title": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TEXT",
            "data": "\nimport net.sansa_stack.rdf.spark.stats._\n\npropertyDist: Array[String] \u003d Array(type\t9103, BFO_0000050\t7199, label\t7183, population\t7183, geo\t7183, seeAlso\t3787, nameOfficialEN\t69, creator\t1, created\t1, title\t1, rights\t1, description\t1, rights\t1, source\t1)\n"
          },
          {
            "type": "TABLE",
            "data": "Property Distribution\tFrequency\n type\t9103\nBFO_0000050\t7199\nlabel\t7183\npopulation\t7183\ngeo\t7183\nseeAlso\t3787\nnameOfficialEN\t69\ncreator\t1\ncreated\t1\ntitle\t1\nrights\t1\ndescription\t1\nrights\t1\nsource\t1\n"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1509621997083_-1710050944",
      "id": "20171102-112637_201407605",
      "dateCreated": "Nov 2, 2017 11:26:37 AM",
      "dateStarted": "Nov 2, 2017 11:27:08 AM",
      "dateFinished": "Nov 2, 2017 11:27:11 AM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "title": "3. Infer new Knowledge",
      "text": "import net.sansa_stack.inference.spark.forwardchaining.{ ForwardRuleReasonerOWLHorst, ForwardRuleReasonerRDFS, ForwardRuleReasonerRDFSDataset, TransitiveReasoner }\nimport net.sansa_stack.inference.spark.data.loader.RDFGraphLoader\nimport java.net.{ URI \u003d\u003e JavaURI }\n\nval graph \u003d RDFGraphLoader.loadFromDisk(spark, JavaURI.create(input), 4)\nval reasoner \u003d new ForwardRuleReasonerRDFS(spark.sparkContext)\nval inferredGraph \u003d reasoner.apply(graph)\ninferredGraph.cache()",
      "user": "anonymous",
      "dateUpdated": "Nov 2, 2017 11:27:57 AM",
      "config": {
        "colWidth": 12.0,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "scala"
        },
        "editorMode": "ace/mode/scala",
        "title": true,
        "tableHide": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TEXT",
            "data": "\nimport net.sansa_stack.inference.spark.forwardchaining.{ForwardRuleReasonerOWLHorst, ForwardRuleReasonerRDFS, ForwardRuleReasonerRDFSDataset, TransitiveReasoner}\n\nimport net.sansa_stack.inference.spark.data.loader.RDFGraphLoader\n\nimport java.net.{URI\u003d\u003eJavaURI}\n\ngraph: net.sansa_stack.inference.spark.data.model.RDFGraph \u003d RDFGraph(MapPartitionsRDD[22] at flatMap at RDFGraphLoader.scala:45)\n\nreasoner: net.sansa_stack.inference.spark.forwardchaining.ForwardRuleReasonerRDFS \u003d net.sansa_stack.inference.spark.forwardchaining.ForwardRuleReasonerRDFS@13c71f77\n\ninferredGraph: net.sansa_stack.inference.spark.data.model.RDFGraph \u003d RDFGraph(MapPartitionsRDD[62] at distinct at ForwardRuleReasonerRDFS.scala:209)\n\nres2: net.sansa_stack.inference.spark.data.model.RDFGraph \u003d RDFGraph(MapPartitionsRDD[62] at distinct at ForwardRuleReasonerRDFS.scala:209)\n"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1509622028081_1197324639",
      "id": "20171102-112708_848247359",
      "dateCreated": "Nov 2, 2017 11:27:08 AM",
      "dateStarted": "Nov 2, 2017 11:27:38 AM",
      "dateFinished": "Nov 2, 2017 11:27:43 AM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "title": "3.1 Compute statistics (i.e Class Distribution to the original graph)",
      "text": "val rdf_stats_class_dist \u003d ClassDistribution(graph, spark).PostProc()\n                           .map(f \u003d\u003e f._1.toString.substring(f._1.toString.lastIndexOf(\"/\") + 1)+ \"\\t\" + f._2)\nprintln(\"%table Class Distribution\\tFrequency\\n \" + rdf_stats_class_dist.mkString(\"\\n\"))",
      "user": "anonymous",
      "dateUpdated": "Nov 2, 2017 11:28:39 AM",
      "config": {
        "colWidth": 6.0,
        "enabled": true,
        "results": {
          "1": {
            "graph": {
              "mode": "lineChart",
              "height": 300.0,
              "optionOpen": false
            },
            "helium": {}
          }
        },
        "editorSetting": {
          "language": "scala"
        },
        "editorMode": "ace/mode/scala",
        "title": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TEXT",
            "data": "\nrdf_stats_class_dist: Array[String] \u003d Array(core#PopulatedPlace\t7183, fabio#WikipediaEntry\t1903, core#StateOrProvince\t16, Dataset\t1)\n"
          },
          {
            "type": "TABLE",
            "data": "Class Distribution\tFrequency\n core#PopulatedPlace\t7183\nfabio#WikipediaEntry\t1903\ncore#StateOrProvince\t16\nDataset\t1\n"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1509622058566_569460406",
      "id": "20171102-112738_1999790335",
      "dateCreated": "Nov 2, 2017 11:27:38 AM",
      "dateStarted": "Nov 2, 2017 11:28:16 AM",
      "dateFinished": "Nov 2, 2017 11:28:18 AM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "title": "3.2 Compute statistics (i.e Class Distribution to the inferred graph)",
      "text": "val rdf_stats_class_dist_inferred \u003d ClassDistribution(inferredGraph, spark).PostProc()\n                           .map(f \u003d\u003e f._1.toString.substring(f._1.toString.lastIndexOf(\"/\") + 1)+ \"\\t\" + f._2)\nprintln(\"%table [Inferred]Class Distribution\\tFrequency\\n \" + rdf_stats_class_dist_inferred.mkString(\"\\n\"))",
      "user": "anonymous",
      "dateUpdated": "Nov 2, 2017 11:29:21 AM",
      "config": {
        "colWidth": 6.0,
        "enabled": true,
        "results": {
          "1": {
            "graph": {
              "mode": "lineChart",
              "height": 300.0,
              "optionOpen": false
            },
            "helium": {}
          }
        },
        "editorSetting": {
          "language": "scala"
        },
        "editorMode": "ace/mode/scala",
        "title": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TEXT",
            "data": "\nrdf_stats_class_dist_inferred: Array[String] \u003d Array(rdf-schema#Resource\t30237, core#PopulatedPlace\t7183, fabio#WikipediaEntry\t1903, core#StateOrProvince\t16, Dataset\t1)\n"
          },
          {
            "type": "TABLE",
            "data": "[Inferred]Class Distribution\tFrequency\n rdf-schema#Resource\t30237\ncore#PopulatedPlace\t7183\nfabio#WikipediaEntry\t1903\ncore#StateOrProvince\t16\nDataset\t1\n"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1509622096514_561642835",
      "id": "20171102-112816_1291571260",
      "dateCreated": "Nov 2, 2017 11:28:16 AM",
      "dateStarted": "Nov 2, 2017 11:29:02 AM",
      "dateFinished": "Nov 2, 2017 11:29:06 AM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "title": "4. Compute resource ranking and get top 50 POIs.",
      "text": "val graph_rep \u003d LoadGraph.fromRDFGraph(inferredGraph)\n   // Create a subgraph based on the vertices connected by geoproperty.\nval geoSubgraph \u003d\n   graph_rep.subgraph(t \u003d\u003e t.attr \u003d\u003d\n       \"http://www.w3.org/2006/vcard/ns#geo\")\n\nval pagerank \u003d geoSubgraph.pageRank(0.00001).vertices\nval report \u003d pagerank.join(geoSubgraph.vertices)\n     .map({ case (k, (r, v)) \u003d\u003e (r, v, k) })\n     .sortBy(50 - _._1)\n\ncase class POI(geoloc:Long, rank:Double, lat: String, lon: String)\nval POIs \u003d report.map{f\u003d\u003e\n   val geoloc \u003d f._3\n   val rank   \u003d f._1\n   val geo \u003d f._2.split(\"[:,]+\")\n   val lat \u003d geo(1)\n   val lon \u003d geo(2)\n\n   POI(geoloc,rank,lat,lon)\n\n}.take(50)\n\nz.angularBind(\"pois\", POIs) // this is what sends the data to the map\n\nval reportPOI \u003d report.map(f \u003d\u003e f._3 + \"\\t\" + f._2 + \"\\t\" + f._1)\nprintln(\"%table geoloc\\tgeocord\\trank\\n \" + reportPOI.take(50).mkString(\"\\n\"))",
      "user": "anonymous",
      "dateUpdated": "Nov 2, 2017 11:30:25 AM",
      "config": {
        "colWidth": 12.0,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "scala"
        },
        "editorMode": "ace/mode/scala",
        "title": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TEXT",
            "data": "\ngraph_rep: org.apache.spark.graphx.Graph[String,String] \u003d org.apache.spark.graphx.impl.GraphImpl@17363589\n\ngeoSubgraph: org.apache.spark.graphx.Graph[String,String] \u003d org.apache.spark.graphx.impl.GraphImpl@2345fd2d\n\npagerank: org.apache.spark.graphx.VertexRDD[Double] \u003d VertexRDDImpl[173] at RDD at VertexRDD.scala:57\n\nreport: org.apache.spark.rdd.RDD[(Double, String, org.apache.spark.graphx.VertexId)] \u003d MapPartitionsRDD[184] at sortBy at \u003cconsole\u003e:56\n\ndefined class POI\nPOIs: Array[POI] \u003d Array(POI(5696,0.405,52.3667,13.6167\"), POI(22233,0.405,49.7667,6.73333\"), POI(26385,0.405,48.0167,10.2667\"), POI(28241,0.405,54.3333,9.01667\"), POI(1205,0.405,53.72834,10.25583\"), POI(19630,0.405,51.1333,12.8167\"), POI(30086,0.405,50.55,7.3\"), POI(27622,0.405,51.4,10.4\"), POI(15570,0.405,49.8,6.78333\"), POI(29950,0.405,50.3389,7.853\"), POI(28906,0.405,50.3667,8\"), POI(16758,0.405,51.9972,14.11191\"), POI(3855,0.405,51.4499,10.3433\"), POI(8063,0.405,49.7167,6.55\"), POI(19323,0.405,50.55,7.41667\"), POI(16243,0.405,51.19668,11.53833\"), POI(9200,0.27749999999999997,49.0667,12.4\"), POI(20484,0.27749999999999997,48.9833,8.2\"), POI(7608,0.27749999999999997,51.86667,13.43333\"), POI(23556,0.27749999999999997,50.7833,7.8\"), POI(11852,0.27749999999999997,49.3667,11.6833\"), POI(1...\nreportPOI: org.apache.spark.rdd.RDD[String] \u003d MapPartitionsRDD[186] at map at \u003cconsole\u003e:56\n"
          },
          {
            "type": "TABLE",
            "data": "geoloc\tgeocord\trank\n 5696\t\"geo:52.3667,13.6167\"\t0.405\n22233\t\"geo:49.7667,6.73333\"\t0.405\n26385\t\"geo:48.0167,10.2667\"\t0.405\n28241\t\"geo:54.3333,9.01667\"\t0.405\n1205\t\"geo:53.72834,10.25583\"\t0.405\n19630\t\"geo:51.1333,12.8167\"\t0.405\n30086\t\"geo:50.55,7.3\"\t0.405\n27622\t\"geo:51.4,10.4\"\t0.405\n15570\t\"geo:49.8,6.78333\"\t0.405\n29950\t\"geo:50.3389,7.853\"\t0.405\n28906\t\"geo:50.3667,8\"\t0.405\n16758\t\"geo:51.9972,14.11191\"\t0.405\n3855\t\"geo:51.4499,10.3433\"\t0.405\n8063\t\"geo:49.7167,6.55\"\t0.405\n19323\t\"geo:50.55,7.41667\"\t0.405\n16243\t\"geo:51.19668,11.53833\"\t0.405\n9200\t\"geo:49.0667,12.4\"\t0.27749999999999997\n20484\t\"geo:48.9833,8.2\"\t0.27749999999999997\n7608\t\"geo:51.86667,13.43333\"\t0.27749999999999997\n23556\t\"geo:50.7833,7.8\"\t0.27749999999999997\n11852\t\"geo:49.3667,11.6833\"\t0.27749999999999997\n18248\t\"geo:49.8597,9.84417\"\t0.27749999999999997\n9336\t\"geo:51.6167,12.8167\"\t0.27749999999999997\n1732\t\"geo:49.53667,8.7875\"\t0.27749999999999997\n6648\t\"geo:51.1667,10.5667\"\t0.27749999999999997\n11084\t\"geo:49.9239,9.80167\"\t0.27749999999999997\n28836\t\"geo:48.85,8.83333\"\t0.27749999999999997\n27628\t\"geo:50.83332,9.57255\"\t0.27749999999999997\n11904\t\"geo:52.9667,8.61667\"\t0.27749999999999997\n2192\t\"geo:50.2333,7.15\"\t0.27749999999999997\n5204\t\"geo:51.65,13.7333\"\t0.27749999999999997\n19676\t\"geo:51.6167,10.2167\"\t0.27749999999999997\n2180\t\"geo:53.1414,8.5932\"\t0.27749999999999997\n18584\t\"geo:49.4167,10.4333\"\t0.27749999999999997\n25976\t\"geo:48.08925,11.83\"\t0.27749999999999997\n11172\t\"geo:47.8184,9.9931\"\t0.27749999999999997\n23916\t\"geo:51.0001,13.1469\"\t0.27749999999999997\n29000\t\"geo:50.9,7.8\"\t0.27749999999999997\n15056\t\"geo:49.3019,8.16556\"\t0.27749999999999997\n18884\t\"geo:48.7325,9.8135\"\t0.27749999999999997\n13404\t\"geo:52.7833,7.41667\"\t0.27749999999999997\n13960\t\"geo:49.0333,12.2167\"\t0.27749999999999997\n8048\t\"geo:48.6381,12.4907\"\t0.27749999999999997\n23180\t\"geo:49.9,10.4\"\t0.27749999999999997\n5708\t\"geo:53.9858,10.7744\"\t0.27749999999999997\n11956\t\"geo:51.85682,14.41493\"\t0.27749999999999997\n29640\t\"geo:48.31,8.91704\"\t0.27749999999999997\n10660\t\"geo:48.02607,7.5859\"\t0.27749999999999997\n17672\t\"geo:49.2,7.68333\"\t0.27749999999999997\n12508\t\"geo:53.4833,9.56667\"\t0.27749999999999997\n"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1509622142083_-934214916",
      "id": "20171102-112902_1189673617",
      "dateCreated": "Nov 2, 2017 11:29:02 AM",
      "dateStarted": "Nov 2, 2017 11:30:13 AM",
      "dateFinished": "Nov 2, 2017 11:30:22 AM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "title": "5.Show POI on the map",
      "text": "%angular\n\n\u003clink rel\u003d\"stylesheet\" href\u003d\"https://cdnjs.cloudflare.com/ajax/libs/leaflet/0.7.5/leaflet.css\" /\u003e\n\u003cdiv id\u003d\"map\" style\u003d\"height: 800px; width: 100%\"\u003e\u003c/div\u003e\n\n\u003cscript type\u003d\"text/javascript\"\u003e\nfunction initMap() {\n    var map \u003d L.map(\u0027map\u0027).setView([30.00, -30.00], 3);\n\n    L.tileLayer(\u0027http://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\u0027, {\n        attribution: \u0027Map data \u0026copy; \u003ca href\u003d\"http://openstreetmap.org\"\u003eOpenStreetMap\u003c/a\u003e contributors\u0027,\n        maxZoom: 12,\n        minZoom: 3\n    }).addTo(map);\n\n    var geoMarkers \u003d L.layerGroup().addTo(map);\n\n    var el \u003d angular.element($(\u0027#map\u0027).parent(\u0027.ng-scope\u0027));\n    angular.element(el).ready(function() {\n        window.locationWatcher \u003d el.scope().compiledScope.$watch(\u0027pois\u0027, function(newValue, oldValue) {\n            // geoMarkers.clearLayers(); -- if you want to only show new data clear the layer first\n            angular.forEach(newValue, function(poi) {\n                var marker \u003d L.marker([ poi.lat, poi.lon ])\n                  .bindPopup(poi.geoloc + \": \" + poi.rank)\n                  .addTo(geoMarkers);\n            });\n        })\n    });\n}\n\nif (window.locationWatcher) {\n    // clear existing watcher otherwise we\u0027ll have duplicates\n    window.locationWatcher();\n}\n\n// ensure we only load the script once, seems to cause issues otherwise\nif (window.L) {\n    initMap();\n} else {\n    console.log(\u0027Loading Leaflet library\u0027);\n    var sc \u003d document.createElement(\u0027script\u0027);\n    sc.type \u003d \u0027text/javascript\u0027;\n    sc.src \u003d \u0027https://cdnjs.cloudflare.com/ajax/libs/leaflet/0.7.5/leaflet.js\u0027;\n    sc.onload \u003d initMap;\n    sc.onerror \u003d function(err) { alert(err); }\n    document.getElementsByTagName(\u0027head\u0027)[0].appendChild(sc);\n}\n\u003c/script\u003e\n",
      "user": "anonymous",
      "dateUpdated": "Nov 2, 2017 11:31:47 AM",
      "config": {
        "colWidth": 12.0,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "scala",
          "editOnDblClick": true
        },
        "editorMode": "ace/mode/undefined",
        "editorHide": true,
        "tableHide": false,
        "title": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "ANGULAR",
            "data": "\u003clink rel\u003d\"stylesheet\" href\u003d\"https://cdnjs.cloudflare.com/ajax/libs/leaflet/0.7.5/leaflet.css\" /\u003e\n\u003cdiv id\u003d\"map\" style\u003d\"height: 800px; width: 100%\"\u003e\u003c/div\u003e\n\n\u003cscript type\u003d\"text/javascript\"\u003e\nfunction initMap() {\n    var map \u003d L.map(\u0027map\u0027).setView([30.00, -30.00], 3);\n\n    L.tileLayer(\u0027http://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\u0027, {\n        attribution: \u0027Map data \u0026copy; \u003ca href\u003d\"http://openstreetmap.org\"\u003eOpenStreetMap\u003c/a\u003e contributors\u0027,\n        maxZoom: 12,\n        minZoom: 3\n    }).addTo(map);\n\n    var geoMarkers \u003d L.layerGroup().addTo(map);\n\n    var el \u003d angular.element($(\u0027#map\u0027).parent(\u0027.ng-scope\u0027));\n    angular.element(el).ready(function() {\n        window.locationWatcher \u003d el.scope().compiledScope.$watch(\u0027pois\u0027, function(newValue, oldValue) {\n            // geoMarkers.clearLayers(); -- if you want to only show new data clear the layer first\n            angular.forEach(newValue, function(poi) {\n                var marker \u003d L.marker([ poi.lat, poi.lon ])\n                  .bindPopup(poi.geoloc + \": \" + poi.rank)\n                  .addTo(geoMarkers);\n            });\n        })\n    });\n}\n\nif (window.locationWatcher) {\n    // clear existing watcher otherwise we\u0027ll have duplicates\n    window.locationWatcher();\n}\n\n// ensure we only load the script once, seems to cause issues otherwise\nif (window.L) {\n    initMap();\n} else {\n    console.log(\u0027Loading Leaflet library\u0027);\n    var sc \u003d document.createElement(\u0027script\u0027);\n    sc.type \u003d \u0027text/javascript\u0027;\n    sc.src \u003d \u0027https://cdnjs.cloudflare.com/ajax/libs/leaflet/0.7.5/leaflet.js\u0027;\n    sc.onload \u003d initMap;\n    sc.onerror \u003d function(err) { alert(err); }\n    document.getElementsByTagName(\u0027head\u0027)[0].appendChild(sc);\n}\n\u003c/script\u003e"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1509622213641_-1187071564",
      "id": "20171102-113013_1400142385",
      "dateCreated": "Nov 2, 2017 11:30:13 AM",
      "dateStarted": "Nov 2, 2017 11:30:50 AM",
      "dateFinished": "Nov 2, 2017 11:30:51 AM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    }
  ],
  "name": "Point of Interest Example",
  "id": "2CWFMFCH1",
  "angularObjects": {
    "2CYG2CWVF:shared_process": [],
    "2CZ3QTK8J:shared_process": [],
    "2CWTU4J8D:shared_process": [],
    "2CX25SUQ1:shared_process": [],
    "2CWPYGHC9:shared_process": [],
    "2CZ1W3DCK:shared_process": [],
    "2CZ4GMSC1:shared_process": [],
    "2CYJK6H3X:shared_process": [],
    "2CYA3S8XB:shared_process": [],
    "2CZJYNWRM:shared_process": [],
    "2CZ9KUNGU:shared_process": [],
    "2CYK82GG6:shared_process": [],
    "2CY9R9AJY:shared_process": [],
    "2CZ4YF4NK:shared_process": [],
    "2CYE1K8JX:shared_process": [],
    "2CZW6TQAR:shared_process": [],
    "2CWRY8CP2:shared_process": [
      {
        "name": "pois",
        "object": [
          {
            "geoloc": 5696.0,
            "rank": 0.405,
            "lat": "52.3667",
            "lon": "13.6167\""
          },
          {
            "geoloc": 22233.0,
            "rank": 0.405,
            "lat": "49.7667",
            "lon": "6.73333\""
          },
          {
            "geoloc": 26385.0,
            "rank": 0.405,
            "lat": "48.0167",
            "lon": "10.2667\""
          },
          {
            "geoloc": 28241.0,
            "rank": 0.405,
            "lat": "54.3333",
            "lon": "9.01667\""
          },
          {
            "geoloc": 1205.0,
            "rank": 0.405,
            "lat": "53.72834",
            "lon": "10.25583\""
          },
          {
            "geoloc": 19630.0,
            "rank": 0.405,
            "lat": "51.1333",
            "lon": "12.8167\""
          },
          {
            "geoloc": 30086.0,
            "rank": 0.405,
            "lat": "50.55",
            "lon": "7.3\""
          },
          {
            "geoloc": 27622.0,
            "rank": 0.405,
            "lat": "51.4",
            "lon": "10.4\""
          },
          {
            "geoloc": 15570.0,
            "rank": 0.405,
            "lat": "49.8",
            "lon": "6.78333\""
          },
          {
            "geoloc": 29950.0,
            "rank": 0.405,
            "lat": "50.3389",
            "lon": "7.853\""
          },
          {
            "geoloc": 28906.0,
            "rank": 0.405,
            "lat": "50.3667",
            "lon": "8\""
          },
          {
            "geoloc": 16758.0,
            "rank": 0.405,
            "lat": "51.9972",
            "lon": "14.11191\""
          },
          {
            "geoloc": 3855.0,
            "rank": 0.405,
            "lat": "51.4499",
            "lon": "10.3433\""
          },
          {
            "geoloc": 8063.0,
            "rank": 0.405,
            "lat": "49.7167",
            "lon": "6.55\""
          },
          {
            "geoloc": 19323.0,
            "rank": 0.405,
            "lat": "50.55",
            "lon": "7.41667\""
          },
          {
            "geoloc": 16243.0,
            "rank": 0.405,
            "lat": "51.19668",
            "lon": "11.53833\""
          },
          {
            "geoloc": 9200.0,
            "rank": 0.27749999999999997,
            "lat": "49.0667",
            "lon": "12.4\""
          },
          {
            "geoloc": 20484.0,
            "rank": 0.27749999999999997,
            "lat": "48.9833",
            "lon": "8.2\""
          },
          {
            "geoloc": 7608.0,
            "rank": 0.27749999999999997,
            "lat": "51.86667",
            "lon": "13.43333\""
          },
          {
            "geoloc": 23556.0,
            "rank": 0.27749999999999997,
            "lat": "50.7833",
            "lon": "7.8\""
          },
          {
            "geoloc": 11852.0,
            "rank": 0.27749999999999997,
            "lat": "49.3667",
            "lon": "11.6833\""
          },
          {
            "geoloc": 18248.0,
            "rank": 0.27749999999999997,
            "lat": "49.8597",
            "lon": "9.84417\""
          },
          {
            "geoloc": 9336.0,
            "rank": 0.27749999999999997,
            "lat": "51.6167",
            "lon": "12.8167\""
          },
          {
            "geoloc": 1732.0,
            "rank": 0.27749999999999997,
            "lat": "49.53667",
            "lon": "8.7875\""
          },
          {
            "geoloc": 6648.0,
            "rank": 0.27749999999999997,
            "lat": "51.1667",
            "lon": "10.5667\""
          },
          {
            "geoloc": 11084.0,
            "rank": 0.27749999999999997,
            "lat": "49.9239",
            "lon": "9.80167\""
          },
          {
            "geoloc": 28836.0,
            "rank": 0.27749999999999997,
            "lat": "48.85",
            "lon": "8.83333\""
          },
          {
            "geoloc": 27628.0,
            "rank": 0.27749999999999997,
            "lat": "50.83332",
            "lon": "9.57255\""
          },
          {
            "geoloc": 11904.0,
            "rank": 0.27749999999999997,
            "lat": "52.9667",
            "lon": "8.61667\""
          },
          {
            "geoloc": 2192.0,
            "rank": 0.27749999999999997,
            "lat": "50.2333",
            "lon": "7.15\""
          },
          {
            "geoloc": 5204.0,
            "rank": 0.27749999999999997,
            "lat": "51.65",
            "lon": "13.7333\""
          },
          {
            "geoloc": 19676.0,
            "rank": 0.27749999999999997,
            "lat": "51.6167",
            "lon": "10.2167\""
          },
          {
            "geoloc": 2180.0,
            "rank": 0.27749999999999997,
            "lat": "53.1414",
            "lon": "8.5932\""
          },
          {
            "geoloc": 18584.0,
            "rank": 0.27749999999999997,
            "lat": "49.4167",
            "lon": "10.4333\""
          },
          {
            "geoloc": 25976.0,
            "rank": 0.27749999999999997,
            "lat": "48.08925",
            "lon": "11.83\""
          },
          {
            "geoloc": 11172.0,
            "rank": 0.27749999999999997,
            "lat": "47.8184",
            "lon": "9.9931\""
          },
          {
            "geoloc": 23916.0,
            "rank": 0.27749999999999997,
            "lat": "51.0001",
            "lon": "13.1469\""
          },
          {
            "geoloc": 29000.0,
            "rank": 0.27749999999999997,
            "lat": "50.9",
            "lon": "7.8\""
          },
          {
            "geoloc": 15056.0,
            "rank": 0.27749999999999997,
            "lat": "49.3019",
            "lon": "8.16556\""
          },
          {
            "geoloc": 18884.0,
            "rank": 0.27749999999999997,
            "lat": "48.7325",
            "lon": "9.8135\""
          },
          {
            "geoloc": 13404.0,
            "rank": 0.27749999999999997,
            "lat": "52.7833",
            "lon": "7.41667\""
          },
          {
            "geoloc": 13960.0,
            "rank": 0.27749999999999997,
            "lat": "49.0333",
            "lon": "12.2167\""
          },
          {
            "geoloc": 8048.0,
            "rank": 0.27749999999999997,
            "lat": "48.6381",
            "lon": "12.4907\""
          },
          {
            "geoloc": 23180.0,
            "rank": 0.27749999999999997,
            "lat": "49.9",
            "lon": "10.4\""
          },
          {
            "geoloc": 5708.0,
            "rank": 0.27749999999999997,
            "lat": "53.9858",
            "lon": "10.7744\""
          },
          {
            "geoloc": 11956.0,
            "rank": 0.27749999999999997,
            "lat": "51.85682",
            "lon": "14.41493\""
          },
          {
            "geoloc": 29640.0,
            "rank": 0.27749999999999997,
            "lat": "48.31",
            "lon": "8.91704\""
          },
          {
            "geoloc": 10660.0,
            "rank": 0.27749999999999997,
            "lat": "48.02607",
            "lon": "7.5859\""
          },
          {
            "geoloc": 17672.0,
            "rank": 0.27749999999999997,
            "lat": "49.2",
            "lon": "7.68333\""
          },
          {
            "geoloc": 12508.0,
            "rank": 0.27749999999999997,
            "lat": "53.4833",
            "lon": "9.56667\""
          }
        ],
        "noteId": "2CWFMFCH1"
      }
    ],
    "2CWAHGCNQ:shared_process": [],
    "2CWDC6XQE:shared_process": []
  },
  "config": {},
  "info": {}
}